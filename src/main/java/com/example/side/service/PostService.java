package com.example.side.service;import com.example.side.config.UserDetailsImpl;import com.example.side.model.entity.*;import com.example.side.repository.PostFileRepository;import com.example.side.repository.PostRepository;import com.example.side.repository.UserRepository;import com.example.side.repository.TagRepository;import com.example.side.request.PostRequest;import com.example.side.response.PostResponse;import org.springframework.cglib.core.Local;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.time.Duration;import java.time.LocalDate;import java.time.LocalDateTime;import java.time.Period;import java.util.ArrayList;import java.util.HashMap;import java.util.List;@Servicepublic class PostService {    private final PostRepository postRepository;    private final UserRepository userRepository;    private final PostFileRepository postFileRepository;    private final TagRepository tagRepository;    public PostService(PostRepository postRepository, UserRepository userRepository, PostFileRepository postFileRepository, TagRepository tagRepository) {        this.postRepository = postRepository;        this.userRepository = userRepository;        this.postFileRepository = postFileRepository;        this.tagRepository = tagRepository;    }    // 생성    @Transactional    public PostResponse createPost(PostRequest postRequest, UserDetailsImpl userDetails) {        Post post;        if ("portfolio".equals(postRequest.getPostType())) {            post = new PortfolioPost(postRequest, userDetails.getUser());        } else if ("community".equals(postRequest.getPostType())) {            post = new CommunityPost(postRequest, userDetails.getUser());        } else {            throw new IllegalArgumentException("Unknown post type: " + postRequest.getPostType());        }        List<PostTag> tags = new ArrayList<>();        for (String tagName : postRequest.getTags()) {            PostTag tag = tagRepository.findByName(tagName).orElseGet(() -> new PostTag(tagName));            tags.add(tag);        }        post.setTags(tags);        Post savedPost = postRepository.save(post);        return new PostResponse(savedPost);    }    // 수정    @Transactional    public PostResponse updatePost(Long postId, PostRequest postRequest, UserDetailsImpl userDetails) {        Post post = postRepository.findById(postId)                .orElseThrow(() -> new IllegalArgumentException("존재하지 않는 포스트입니다."));        if (!post.getUser().getId().equals(userDetails.getUser().getId())) {            throw new IllegalArgumentException("권한이 없습니다.");        }        post.setTitle(postRequest.getTitle());        post.setContent(postRequest.getContent());        List<PostTag> tags = new ArrayList<>();        for (String tagName : postRequest.getTags()) {            PostTag tag = tagRepository.findByName(tagName).orElseGet(() -> new PostTag(tagName));            tags.add(tag);        }        post.setTags(tags);        Post savedPost = postRepository.save(post);        return new PostResponse(savedPost);    }    // 삭제    @Transactional    public HashMap<String, Long> deletePost(Long postId, UserDetailsImpl userDetails) {        Post post = postRepository.findById(postId)                .orElseThrow(() -> new IllegalArgumentException("존재하지 않는 포스트입니다."));        if (!post.getUser().getId().equals(userDetails.getUser().getId())) {            throw new IllegalArgumentException("권한이 없습니다.");        }        postRepository.deleteById(postId);        HashMap<String, Long> responseId = new HashMap<>();        responseId.put("PostId", post.getId());        return responseId;    }    // 조회    public PostResponse recentPosts(){        List<Post> postList = postRepository.findAllByOrderByCreatedAtDesc();        List<Post> posts = new ArrayList<>();        for (int i=0; i<postList.size(); i++){            PostResponse postResponse= new PostResponse(postList.get(i));            //생성일자 몇일전인지 비교            LocalDate currentDate = LocalDate.from(LocalDateTime.now());            LocalDate postTime = LocalDate.from(postList.get(i).getCreatedAt());            Period period = Period.between(postTime, currentDate);            String dayBefore = "";            int days = (period.getDays())*-1;            if (days<1){                LocalDateTime nowTime= LocalDateTime.now();                LocalDateTime createdTime = postList.get(i).getCreatedAt();                Duration duration = Duration.between(nowTime, createdTime);                int time = (int) duration.getSeconds();                dayBefore = String.valueOf(time/3600) + "시간 전";            }else if (days<8){                dayBefore = String.valueOf(days) + "일 전";            }else{                dayBefore += postTime;            }            postResponse.setDayBefore(dayBefore);            List<String> responseTags = new ArrayList<>();            for (int j=0; j<postList.get(i).getTags().size(); j++){                String tagName=postList.get(i).getTags().get(j).getName();                postResponse.addTag(tagName);            }            postResponse.setTags(responseTags);            String prefileImage="Null";            User findUser=userRepository.findByNickname(postList.get(i).getNickname()).orElseThrow(()->new IllegalArgumentException("존재하지 않는 유저입니다."));            if(findUser.getProfileImage()!=null){                prefileImage=findUser.getProfileImage();            }            postResponse.setProfileImage(prefileImage);            postResponse.setContent(postList.get(i).getContent().size());            postResponse.setLike(postList.get(i).getLikeCount().size());        }    }}