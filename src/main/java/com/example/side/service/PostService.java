package com.example.side.service;import com.example.side.config.UserDetailsImpl;import com.example.side.model.entity.Post;import com.example.side.model.entity.PostTag;import com.example.side.repository.PostFileRepository;import com.example.side.repository.PostRepository;import com.example.side.repository.UserRepository;import com.example.side.repository.TagRepository;import com.example.side.request.PostRequest;import com.example.side.response.PostResponse;import org.springframework.stereotype.Service;import java.util.ArrayList;import java.util.HashMap;import java.util.List;@Servicepublic class PostService {    private final PostRepository postRepository;    private final UserRepository userRepository;    private final PostFileRepository postFileRepository;    private final TagRepository tagRepository;    public PostService(PostRepository postRepository, UserRepository userRepository, PostFileRepository postFileRepository, TagRepository tagRepository) {        this.postRepository = postRepository;        this.userRepository = userRepository;        this.postFileRepository = postFileRepository;        this.tagRepository = tagRepository;    }    //생성    public PostResponse createPost(PostRequest postRequest, UserDetailsImpl userDetails) {        Post post =new Post(postRequest);        List<PostTag> tag=new ArrayList<>();        post.setTag(tag.toString());        Post savePost = postRepository.save(post);        PostResponse postResponse = new PostResponse(savePost);        return postResponse;    }    //수정    public PostResponse updatePost(Long postId,PostRequest postRequest, UserDetailsImpl userDetails) {        Post post = postRepository.findById(postId).orElseThrow(() -> new IllegalArgumentException("존재하지 않는 포스트입니다."));        if(!post.getUser().getId().equals(userDetails.getUser().getId())) {            throw new IllegalArgumentException("권한이 없습니다.");        }        post.setTitle(postRequest.getTitle());        post.setContent(postRequest.getContent());        //저장        Post savePost = postRepository.save(post);        PostResponse postResponse = new PostResponse(savePost);        return postResponse;    }    //삭제    public HashMap<String,Long> deletePost(Long postId, UserDetailsImpl userDetails) {        Post post = postRepository.findById(postId).orElseThrow(() -> new IllegalArgumentException("존재하지 않는 포스트입니다."));        if(!post.getUser().getId().equals(userDetails.getUser().getId())) {            throw new IllegalArgumentException("권한이 없습니다.");        }        HashMap<String,Long> responseId = new HashMap<>();        responseId.put("PostId",post.getId());        postRepository.deleteById(postId);        return responseId;    }}