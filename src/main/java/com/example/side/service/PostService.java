package com.example.side.service;import com.example.side.config.UserDetailsImpl;import com.example.side.model.entity.*;import com.example.side.repository.PostFileRepository;import com.example.side.repository.UserRepository;import com.example.side.repository.TagRepository;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.time.LocalDate;import java.time.temporal.ChronoUnit;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.stream.Collectors;@Servicepublic class PostService {    private final PostRepository postRepository;    private final UserRepository userRepository;    private final PostFileRepository postFileRepository;    private final TagRepository tagRepository;    public PostService(PostRepository postRepository, UserRepository userRepository, PostFileRepository postFileRepository, TagRepository tagRepository) {        this.postRepository = postRepository;        this.userRepository = userRepository;        this.postFileRepository = postFileRepository;        this.tagRepository = tagRepository;    }    // 생성    @Transactional    public PostResponse createPost(PostRequest postRequest, UserDetailsImpl userDetails) {        Post post;        if ("portfolio".equals(postRequest.getPostType())) {            post = new PortfolioPost(postRequest, userDetails.getUser());        } else if ("community".equals(postRequest.getPostType())) {            post = new CommunityPost(postRequest, userDetails.getUser());        } else {            throw new IllegalArgumentException("Unknown post type: " + postRequest.getPostType());        }        // 태그 설정 (필요 시 사용)        // List<PostTag> tags = new ArrayList<>();        // for (String tagName : postRequest.getTags()) {        //     PostTag tag = tagRepository.findByName(tagName).orElseGet(() -> new PostTag(tagName));        //     tags.add(tag);        // }        // post.setTags(tags);        Post savedPost = postRepository.save(post);        return new PostResponse(savedPost);    }    // 수정    @Transactional    public PostResponse updatePost(Long postId, PostRequest postRequest, UserDetailsImpl userDetails) {        Post post = postRepository.findById(postId)                .orElseThrow(() -> new IllegalArgumentException("존재하지 않는 포스트입니다."));        if (!post.getUser().getId().equals(userDetails.getUser().getId())) {            throw new IllegalArgumentException("권한이 없습니다.");        }        post.setTitle(postRequest.getTitle());        post.setContent(postRequest.getContent());        // 태그 설정 (필요 시 사용)        // List<PostTag> tags = new ArrayList<>();        // for (String tagName : postRequest.getTags()) {        //     PostTag tag = tagRepository.findByName(tagName).orElseGet(() -> new PostTag(tagName));        //     tags.add(tag);        // }        // post.setTags(tags);        Post savedPost = postRepository.save(post);        return new PostResponse(savedPost);    }    // 삭제    @Transactional    public HashMap<String, Long> deletePost(Long postId, UserDetailsImpl userDetails) {        Post post = postRepository.findById(postId)                .orElseThrow(() -> new IllegalArgumentException("존재하지 않는 포스트입니다."));        if (!post.getUser().getId().equals(userDetails.getUser().getId())) {            throw new IllegalArgumentException("권한이 없습니다.");        }        postRepository.deleteById(postId);        HashMap<String, Long> responseId = new HashMap<>();        responseId.put("PostId", post.getId());        return responseId;    }    // 내 게시글 전체 조회    @Transactional(readOnly = true)    public List<PostResponse> myPosts(UserDetailsImpl userDetails) {        List<Post> posts = postRepository.findAllByUserOrderByCreatedAtDesc(userDetails.getUser());        List<PostResponse> postResponses = new ArrayList<>();        for (Post post : posts) {            postResponses.add(new PostResponse(post));        }        return postResponses;    }    // 게시글 상세 조회    @Transactional(readOnly = true)    public PostResponse getPost(Long postId) {        Post post = postRepository.findById(postId)                .orElseThrow(() -> new IllegalArgumentException("존재하지 않는 포스트입니다."));        return new PostResponse(post);    }    // 포트폴리오 게시물 전체 조회    @Transactional(readOnly = true)    public List<PostResponse> portfolioPosts() {        List<PortfolioPost> posts = portfolioPostRepository.findAllByOrderByCreatedAtDesc();        List<PortfolioPostResponse> portfolioPostResponses = new ArrayList<>();        for (PortfolioPost portfolioPost : posts) {            PortfolioPostResponses.add(new PortfolioPostResponse(portfolioPost));        }        return portfolioPostResponses;    }    //일반 게시글 전체 조회    @Transactional(readOnly = true)    public List<PostResponse> communityPosts() {        List<CommunityPost> posts = communityPostRepository.findAllByOrderByCreatedAtDesc();        List<CommunityPostResponse> communityPostResponses = new ArrayList<>();        for (CommunityPost communityPost : posts) {            communityPostResponses.add(new communityPostResponse(communityPost));        }        return communityPostResponses;    }    //필터링 조회(기간별, 태그 , 카테고리)    @Transactional(readOnly = true)    public List<PostResponse> filterSearch(String tag, String category, String period) {        LocalDate startDate = calculateStartDate(period);        LocalDate endDate = LocalDate.now();        List<PortfolioPost> posts = PortpolioPostRepository.findByTagCategoryAndCreationDate(tag, category, startDate, endDate);        return posts.stream()                .map(PostResponse::new)                .collect(Collectors.toList());    }    private LocalDate calculateStartDate(String period) {        switch (period) {            case "day":                return LocalDate.now().minus(1, ChronoUnit.DAYS);            case "week":                return LocalDate.now().minus(1, ChronoUnit.WEEKS);            case "month":                return LocalDate.now().minus(1, ChronoUnit.MONTHS);            default:                throw new IllegalArgumentException("Unknown period: " + period);        }    }}